{"version":3,"sources":["services/tdl.js","App.js","serviceWorker.js","index.js"],"names":["getTdl","id","a","axios","get","res","data","useState","tdl","setTdl","useEffect","console","log","fetchData","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAGaA,EAAM,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEAEAC,IAAMC,IAAN,oCAAuCH,IAFvC,cAEZI,EAFY,yBAGXA,EAAIC,MAHO,2CAAH,sD,ECKKC,mBAAS,I,mBAAxBC,E,KAAKC,E,KAEdC,qBAAU,YAGa,uCAAG,4BAAAR,EAAA,sEAEIF,IAFJ,OAERQ,EAFQ,OAGdG,QAAQC,IAAIJ,GACZC,EAAOD,GAJO,2CAAH,qDAQfK,KACD,CAACL,IAuCOM,MArCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAGlB,8BACE,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,sBACb,4CAEF,yBAAKA,UAAU,0BACb,2CAGJ,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,qBACb,qCAGF,yBAAKA,UAAU,uBACb,wCAGJ,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,sBACb,sCAEF,yBAAKA,UAAU,sBACb,2CC1CQC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCXRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.400ac6d5.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport const getTdl = async (id) => \n{\n    const res = await axios.get(`http://localhost:3000/tdl/${id}`);\n    return res.data;\n};\nexport const getAllTdl = async () => \n{\n    const res = await axios.get(`http://localhost:3000/tdl/`);\n    return res.data;\n};","import React from 'react';\nimport './App.css';\n//import  { useParams } from \"react-router\";\nimport { useEffect, useState } from \"react\";\nimport { getTdl } from \"./services/tdl\";\n//import { getAllTdl } from \"../services/tdl\";\n\n//const { idTdl } = useParams();\n  const [tdl, setTdl] = useState([]);\n\nuseEffect(() => \n    {\n\n        const fetchData = async () => \n        {\n            const tdl = await getTdl();\n            console.log(tdl);\n            setTdl(tdl);\n\n        }\n\n        fetchData();\n    }, [tdl])\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n      </header>\n      <body>      \n        <div className=\"row ligne_widget_1\">\n          <div className=\"col-2 meteo_widget\">\n            <h2>Météo</h2>\n          </div>\n          <div className=\"col-9 graphique_widget\">\n            <h2>Graphique</h2>\n          </div>\n        </div>\n        <div className=\"row ligne_widget_2\">\n          <div className=\"col-9 read_widget\">\n            <h2>Read</h2>\n            \n          </div>\n          <div className=\"col-2 update_widget\">\n            <h2>Update</h2>\n          </div>\n        </div>\n        <div className=\"row ligne_widget_3\">\n          <div className=\"col-9 creat_widget\">\n            <h2>Creat</h2>\n          </div>\n          <div className=\"col-2 delet_widget\">\n            <h2>Delete</h2>\n          </div>\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}